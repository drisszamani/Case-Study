pipeline {
    agent any

    tools {
        jdk 'JDK 17'
        maven 'Maven_3.9.9'
    }

    environment {
        DOCKER_REGISTRY = 'docker.io/drisszamanii'
        VERSION = '1.0.0'
        MAVEN_OPTS = '''
            -Dmaven.wagon.http.pool=false
            -Dmaven.wagon.http.retryHandler.count=3
            -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
            -Dmaven.repo.local=/root/.m2/repository
        '''
        KUBECONFIG = credentials('kubeconfig')
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
        stage('Setup Maven Cache') {
            steps {
                script {
                    sh """
                        mkdir -p /root/.m2
                        touch /root/.m2/settings.xml
                        echo '<?xml version="1.0" encoding="UTF-8"?>
                        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                                xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
                            <mirrors>
                                <mirror>
                                    <id>central-secure</id>
                                    <url>https://repo1.maven.org/maven2</url>
                                    <mirrorOf>central</mirrorOf>
                                </mirror>
                            </mirrors>
                        </settings>' > /root/.m2/settings.xml
                    """
                }
            }
        }

        stage('Verify Tools') {
            steps {
                sh '''
                    java -version
                    mvn -version
                    docker --version
                    kubectl version --client
                '''
            }
        }

        stage('Build & Test') {
            steps {
                script {
                    def services = ['car', 'client', 'gateway', 'server_eureka']
                    for (service in services) {
                        dir(service) {
                            sh """
                                echo "Building ${service}..."
                                mvn package -B -U clean install -DskipTests
                            """
                        }
                    }
                }
            }
        }

        // Rest of the stages remain the same
    }

    post {
        always {
            cleanWs()
            sh 'docker system prune -f'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Check the logs for details.'
        }
    }
}