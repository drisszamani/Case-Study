pipeline {
   agent any

   tools {
       jdk 'JDK 17'
       maven 'Maven_3.9.9'
   }

   environment {
       DOCKER_REGISTRY = 'docker.io/drisszamanii'
       VERSION = '1.0.0'
   }

   options {
       timeout(time: 60, unit: 'MINUTES')
       disableConcurrentBuilds()
   }

   stages {
       stage('Build & Test') {
           options {
               timeout(time: 10, unit: 'MINUTES')
           }
           steps {
               script {
                   def services = ['car', 'client', 'gateway', 'server_eureka']
                   services.each { service ->
                       dir(service) {
                           withMaven(
                               maven: 'Maven_3.9.9',
                               options: [junitPublisher(ignoreAttachments: false)],
                               mavenOpts: '-Xmx1024m'
                           ) {
                               sh """
                                   mvn clean verify \
                                       -Dspring.profiles.active=test \
                                       -Dmaven.test.failure.ignore=true \
                                       -B
                               """
                           }

                           // Run performance tests specifically for car service
                           if (service == 'car') {
                               sh """
                                   mvn verify -Pperformance-tests \
                                       -Dspring.profiles.active=test \
                                       -Djmeter.target.host=localhost \
                                       -Djmeter.target.port=8888
                               """

                               // Archive performance test results
                               archiveArtifacts artifacts: 'target/jmeter/results/*.jtl'
                               publishHTML([
                                   allowMissing: false,
                                   alwaysLinkToLastBuild: true,
                                   keepAll: true,
                                   reportDir: 'target/jmeter/reports',
                                   reportFiles: 'index.html',
                                   reportName: 'Performance Test Report'
                               ])
                           }
                       }
                   }
               }
           }
           post {
               always {
                   junit(
                       allowEmptyResults: true,
                       keepLongStdio: true,
                       testResults: '**/target/surefire-reports/TEST-*.xml',
                       skipMarkingBuildUnstable: true
                   )
               }
               failure {
                   script {
                       def testReports = findFiles(glob: '**/target/surefire-reports/*.txt')
                       testReports.each { report ->
                           echo "Test Failure Details from ${report.path}:"
                           sh "cat ${report.path}"
                       }
                       archiveArtifacts(
                           artifacts: '**/target/surefire-reports/*.txt',
                           allowEmptyArchive: true
                       )
                   }
               }
           }
       }

       stage('Performance Test Results') {
           steps {
               script {
                   dir('car') {
                       def performanceReport = readFile('target/jmeter/results/statistics.json')
                       def stats = readJSON text: performanceReport

                       echo """Performance Test Summary:
                           RestTemplate Average Response Time: ${stats.RestTemplate.mean} ms
                           FeignClient Average Response Time: ${stats.FeignClient.mean} ms
                           WebClient Average Response Time: ${stats.WebClient.mean} ms
                       """
                   }
               }
           }
       }

       stage('Build Docker Images') {
           steps {
               script {
                   def services = ['car', 'client', 'gateway', 'server_eureka']
                   services.each { service ->
                       dir(service) {
                           sh """
                               docker build \
                                   -t ${DOCKER_REGISTRY}/${service}:${VERSION} \
                                   -f ../docker/${service}/Dockerfile .
                           """
                       }
                   }
               }
           }
       }

       stage('Deploy') {
           steps {
               withKubeConfig([credentialsId: 'kubeconfig']) {
                   sh '''
                       kubectl apply -f k8s/services/namespace.yaml
                       kubectl apply -f k8s/rbac/
                       kubectl apply -f k8s/services/
                       kubectl apply -f k8s/deployments/
                   '''
               }
           }
       }
   }

   post {
       always {
           cleanWs()
       }
       success {
           echo 'Pipeline completed successfully!'
       }
       failure {
           echo 'Pipeline failed! Check test reports and logs for details.'
           emailext (
               subject: "Pipeline Failed: ${currentBuild.fullDisplayName}",
               body: "Pipeline failure in build ${env.BUILD_URL}",
               recipientProviders: [[$class: 'DevelopersRecipientProvider']]
           )
       }
       unstable {
           echo 'Pipeline is unstable. Check test results.'
       }
   }
}