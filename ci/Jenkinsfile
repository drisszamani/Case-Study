pipeline {
    agent any

    tools {
        jdk 'JDK 17'
        maven 'Maven_3.9.9'
    }

    environment {
        DOCKER_REGISTRY = 'docker.io/drisszamanii'
        VERSION = '1.0.0'
    }

    stages {
        stage('Build & Test') {
            steps {
                script {
                    def services = ['car', 'client', 'gateway', 'server_eureka']
                    services.each { service ->
                        dir(service) {
                            withMaven(maven: 'Maven_3.9.9', 
                                    options: [junitPublisher(ignoreAttachments: false)]) {
                                sh """
                                    mvn clean verify -Dspring.profiles.active=test
                                """
                            }
                        }
                    }
                }
            }
            post {
                always {
                    junit(
                        allowEmptyResults: true,
                        keepLongStdio: true,
                        testResults: '**/target/surefire-reports/TEST-*.xml'
                    )
                }
                failure {
                    script {
                        def testReports = findFiles(glob: '**/target/surefire-reports/*.txt')
                        testReports.each { report ->
                            echo "Test Failure Details from ${report.path}:"
                            sh "cat ${report.path}"
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def services = ['car', 'client', 'gateway', 'server_eureka']
                    services.each { service ->
                        dir(service) {
                            sh "docker build -t ${DOCKER_REGISTRY}/${service}:${VERSION} -f ../docker/${service}/Dockerfile ."
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                withKubeConfig([credentialsId: 'kubeconfig']) {
                    sh '''
                        kubectl apply -f k8s/services/namespace.yaml
                        kubectl apply -f k8s/rbac/
                        kubectl apply -f k8s/services/
                        kubectl apply -f k8s/deployments/
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            echo 'Pipeline failed! Check test reports for details.'
        }
    }
}
