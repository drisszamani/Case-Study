pipeline {
    agent any

    tools {
        jdk 'JDK 17'
        maven 'Maven_3.9.9'
    }

    environment {
        DOCKER_REGISTRY = 'docker.io/drisszamanii'
        VERSION = '1.0.0'
    }

    stages {
        stage('Build & Test') {
            steps {
                script {
                    def services = ['car', 'client', 'gateway', 'server_eureka']
                    services.each { service ->
                        dir(service) {
                            withMaven(maven: 'Maven_3.9.9') {
                                sh """
                                    mvn -B clean package -DskipTests
                                    mvn -B test
                                """
                            }
                        }
                    }
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def services = ['car', 'client', 'gateway', 'server_eureka']
                    services.each { service ->
                        dir(service) {
                            sh "docker build -t ${DOCKER_REGISTRY}/${service}:${VERSION} -f ../docker/${service}/Dockerfile ."
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    try {
                        withKubeConfig([
                            credentialsId: 'kubeconfig',
                            serverUrl: 'YOUR_KUBERNETES_API_SERVER',
                            contextName: 'YOUR_CONTEXT'
                        ]) {
                            sh '''
                                echo "Validating kubeconfig..."
                                kubectl config view
                                kubectl get nodes

                                echo "Applying Kubernetes configurations..."
                                kubectl apply -f k8s/services/namespace.yaml
                                kubectl apply -f k8s/rbac/
                                kubectl apply -f k8s/services/
                                kubectl apply -f k8s/deployments/
                            '''
                        }
                    } catch (Exception e) {
                        echo "Deployment failed. Fetching events..."
                        sh '''
                            kubectl get events --sort-by=.metadata.creationTimestamp
                        '''
                        error "Deployment failed: ${e.message}"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
